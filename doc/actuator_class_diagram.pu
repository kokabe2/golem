@startuml actuator_class_diagram
skinparam {
    defaultFontName Ricty Diminished
    monochrome true
}

package Golem {
    interface Command {
        + Delete(Command*)
        + Do()
    }

    folder actuators {
        interface Actuator {
            + Delete(Actuator*)
            + ActuatorOnCommand(Actuator): Command
            + ActuatorOffCommand(Actuator): Command
            + ActuatorForceOffCommand(Actuator): Command
            + GetId(Actuator): int
            + GetTag(Actuator): const char*
            + GetState(Actuator): const char*
            + IsOn(Actuator): bool
        }

        interface ActuatorFactory {
            + Delete(ActuatorFactory*)
            + Make(ActuatorFactory, int): Actuator
        }

        folder motors {
            interface Motor {
                + Delete(Motor*)
                + MotorOnCommand(Motor): Command
                + MotorOffCommand(Motor): Command
                + MotorForceOffCommand(Motor): Command
                + GetId(Motor): int
                + GetTag(Motor): const char*
                + GetState(Motor): const char*
                + IsOn(Motor): bool
                + GetDirection(Motor): const char*
                + SetDirection(Motor, const char*)
                + GetSpeed(Motor): int
                + SetSpeed(Motor, int)
            }

            interface MotorFactory {
                + Delete(MotorFactory*)
                + Make(MotorFactory, int): Motor
            }

            folder pulse_motors {
                interface PulseMotor {
                    + Delete(PulseMotor*)
                    + PulseMotorOnCommand(PulseMotor): Command
                    + PulseMotorOffCommand(PulseMotor): Command
                    + PulseMotorForceOffCommand(PulseMotor): Command
                    + GetId(PulseMotor): int
                    + GetTag(PulseMotor): const char*
                    + GetState(PulseMotor): const char*
                    + IsOn(PulseMotor): bool
                    + GetDirection(PulseMotor): const char*
                    + SetDirection(PulseMotor, const char*)
                    + GetSpeed(PulseMotor): int
                    + SetSpeed(PulseMotor, int)
                    + GetMode(PulseMotor): const char*
                    + SelectMode(PulseMotor, const char*)
                    + GetPulseRate(PulseMotor): int
                    + SetPulseRate(PulseMotor, int)
                    + GetPosition(PulseMotor): int
                    + PulseMotorStopCommand(PulseMotor, int): Command
                    + PulseMotorWatchCommand(PulseMotor, int, Command): Command
                }

                interface PulseMotorFactory {
                    + Delete(PulseMotorFactory*)
                    + Make(PulseMotorFactory, int): PulseMotor
                }

                PulseMotor <- PulseMotorFactory
            }

            Motor <- MotorFactory
            Motor <|.. PulseMotor
        }

        folder solenids {
            interface Solenoid {
                + Delete(Solenoid*)
                + SolenoidOnCommand(Solenoid): Command
                + SolenoidOffCommand(Solenoid): Command
                + SolenoidForceOffCommand(Solenoid): Command
                + GetId(Solenoid): int
                + GetTag(Solenoid): const char*
                + GetState(Solenoid): const char*
                + IsOn(Solenoid): bool
            }

            interface SolenoidFactory {
                + Delete(SolenoidFactory*)
                + Make(SolenoidFactory, int): Solenoid
            }

            Solenoid <- SolenoidFactory
        }

        Actuator <|.. Motor
        Actuator <|.. Solenoid
    }

    Command <|-- Actuator
    Actuator <- ActuatorFactory
}
@enduml
